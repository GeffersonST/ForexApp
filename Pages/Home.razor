@page "/home"
@using ForexApp.Models
@using ForexApp.Services
@inject ForexService forexService

<style>
    body {
        background-color: #f3f3f4;
    }

    .content-container {
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

    .title {
        font-size: 24px;
        font-weight: bold;
        color: #1c3c6c;
        margin-right: 50px;
    }

    .select-container {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        margin-right: 40px;
    }

    .select-container select {
        width: 120px;
        padding: 15px;
        font-size: 16px;
        font-weight: bold;
        border: 1px solid #ccc;
        background-color: #f8f9fa;
        color: rgba(0, 0, 0, 0.6);
        margin-right: 20px;
    }

    .last-refreshed {
        font-size: 14px;
        color: #6c757d;
        margin-top: -50px;
    }
</style>

@if (forexData != null && forexData.TimeSeries != null)
{
    <div class="content-container">
        <div class="select-container">
            <p class="title">Forex Daily Prices</p>
            <div class="select-container">
                <select @onchange="OnFromCurrencyChanged">
                    <option value="GBP">GBP</option>
                    <option value="EUR" selected>EUR</option>
                    <option value="USD">USD</option>
                </select>
                <select @onchange="OnToCurrencyChanged">
                    <option value="GBP">GBP</option>
                    <option value="EUR">EUR</option>
                    <option value="USD" selected>USD</option>
                </select>
                <button class="btn" @onclick="RefreshData"><span class="oi oi-loop-circular" aria-hidden="true"></span></button>
            </div>
        </div>
        <p class="last-refreshed">Last Refreshed: @forexData.MetaData!.LastRefreshed</p>

        <table class="table">
            <thead>
                <tr>
                    <th style="text-align: center; color: #6c757d;">Open</th>
                    <th style="background-color: #ffffff; border-left: 1px solid #dee2e6; border-right: 1px solid #dee2e6; text-align: center; color: #6c757d;">High</th>
                    <th style="background-color: #ffffff; border-left: 1px solid #dee2e6; border-right: 1px solid #dee2e6; text-align: center; color: #6c757d;">Low</th>
                    <th style="text-align: center; color: #6c757d;">Close</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="color: #6c757d; text-align: center;">@forexData.TimeSeries.LastOrDefault().Value.Open</td>
                    <td style="background-color: #f1f1f1; border-left: 1px solid #dee2e6; border-right: 1px solid #dee2e6; font-weight: bold; color: #6c757d; text-align: center;">@forexData.TimeSeries.LastOrDefault().Value.High</td>
                    <td style="background-color: #f1f1f1; border-left: 1px solid #dee2e6; border-right: 1px solid #dee2e6; font-weight: bold; color: #6c757d; text-align: center;">@forexData.TimeSeries.LastOrDefault().Value.Low</td>
                    <td style="color: #6c757d; text-align: center;">@forexData.TimeSeries.LastOrDefault().Value.Close</td>
                </tr>
            </tbody>
        </table>
    </div>
}
else if (forexData == null)
{
    <p>Error fetching data. Please try again later.</p>
}
else
{
    <p>Loading...</p>
}

@code {
    private ForexData forexData;
    private string fromCurrency = "EUR";
    private string toCurrency = "USD";

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        try
        {
            forexData = await forexService.GetForexDataAsync(fromCurrency, toCurrency);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            forexData = null;
        }
    }

    private async Task OnFromCurrencyChanged(ChangeEventArgs e)
    {
        fromCurrency = e.Value.ToString();
        await RefreshData();
    }

    private async Task OnToCurrencyChanged(ChangeEventArgs e)
    {
        toCurrency = e.Value.ToString();
        await RefreshData();
    }
}
